'use client';
import React, { useState, useLayoutEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';

interface FormData {
  fullName: string;
  dob: string;
  gender: string;
  phoneNumber: string;
  zaloPhoneNumber: string;
  email: string;
  facebookLink: string;
  userType: string;
  otherUserType: string;
  schoolOrWorkPlace: string;
  city: string;
  highSchoolName: string;
  programsSelected: string[];
  infoSources: string[];
  otherInfoSource: string;
  consent: boolean;
}

const initialFormData: FormData = {
  fullName: '',
  dob: '',
  gender: '',
  phoneNumber: '',
  zaloPhoneNumber: '',
  email: '',
  facebookLink: '',
  userType: '',
  otherUserType: '',
  schoolOrWorkPlace: '',
  city: '',
  highSchoolName: '',
  programsSelected: [],
  infoSources: [],
  otherInfoSource: '',
  consent: false,
};

const RegistrationForm: React.FC = () => {
  const router = useRouter();
  const effectRan = useRef(false); // flag nh·ªõ tr·∫°ng th√°i

  useLayoutEffect(() => {
    if (effectRan.current) return; // n·∫øu ƒë√£ ch·∫°y r·ªìi th√¨ kh√¥ng ch·∫°y n·ªØa
    effectRan.current = true;
    const fromHome = sessionStorage.getItem('fromHome');
    if (fromHome === 'true') {
      sessionStorage.removeItem('fromHome');
    } else {
      router.replace('/home');
    }
  }, []);

  const [formData, setFormData] = useState<FormData>(initialFormData);
  const [errors, setErrors] = useState<Partial<Record<keyof FormData, string>>>(
    {}
  );
  // C√°c ngu·ªìn th√¥ng tin
  const infoSourcesOptions = [
    'B·∫°n b√®',
    'Facebook:  Fanpage',
    'Website:',
    'Email',
    'SMS',
    'Bandroll, Poster',
    'T·ªù gi·ªõi thi·ªáu',
    'Google',
    'S·ª± ki·ªán, ng√†y h·ªôi vi·ªác l√†m',
  ];

  const validateForm = () => {
    const newErrors: Partial<Record<keyof FormData, string>> = {};

    if (!formData.fullName.trim())
      newErrors.fullName = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n';
    if (!formData.dob.trim())
      newErrors.dob = 'Vui l√≤ng nh·∫≠p ng√†y th√°ng nƒÉm sinh';
    // if (!formData.gender) newErrors.gender = 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh';

    if (!formData.phoneNumber.trim()) {
      newErrors.phoneNumber = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i th∆∞·ªùng d√πng';
    } else if (!/^\d{10,11}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i th∆∞·ªùng d√πng kh√¥ng h·ª£p l·ªá';
    }

    if (
      formData.zaloPhoneNumber.trim() &&
      !/^\d{10,11}$/.test(formData.zaloPhoneNumber)
    ) {
      newErrors.zaloPhoneNumber = 'S·ªë ƒëi·ªán tho·∫°i Zalo kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Vui l√≤ng nh·∫≠p email th∆∞·ªùng d√πng';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.userType) newErrors.userType = 'Vui l√≤ng ch·ªçn b·∫°n l√† ai';
    if (formData.userType === 'M·ª•c kh√°c' && !formData.otherUserType.trim()) {
      newErrors.otherUserType = 'Vui l√≤ng ghi r√µ m·ª•c kh√°c';
    }

    // if (formData.infoSources.length === 0) {
    //   newErrors.infoSources = 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ngu·ªìn th√¥ng tin';
    // }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const target = e.target;

    if (target instanceof HTMLInputElement) {
      const { name, type, value, checked } = target;

      if (type === 'checkbox') {
        if (name === 'programsSelected') {
          let newPrograms = [...formData.programsSelected];
          if (checked) {
            if (!newPrograms.includes(value)) newPrograms.push(value);
          } else {
            newPrograms = newPrograms.filter((p) => p !== value);
          }
          setFormData((prev) => ({ ...prev, programsSelected: newPrograms }));
        } else if (name === 'infoSources') {
          let newSources = [...formData.infoSources];
          if (checked) {
            if (!newSources.includes(value)) newSources.push(value);
          } else {
            newSources = newSources.filter((s) => s !== value);
          }
          setFormData((prev) => ({ ...prev, infoSources: newSources }));
        } else if (name === 'consent') {
          setFormData((prev) => ({ ...prev, consent: checked }));
        }
      } else {
        setFormData((prev) => ({ ...prev, [name]: value }));
      }
    } else if (
      target instanceof HTMLTextAreaElement ||
      target instanceof HTMLSelectElement
    ) {
      const { name, value } = target;
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      alert('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, vui l√≤ng ki·ªÉm tra k·ªπ l·∫°i');
      return; // D·ª´ng g·ª≠i form n·∫øu validation th·∫•t b·∫°i
    }
    let courseName = '';
    let className = '';
    if (typeof window !== 'undefined') {
      const savedDataString = localStorage.getItem('formData');

      if (savedDataString) {
        const savedData = JSON.parse(savedDataString); // parse JSON th√†nh object
        courseName = savedData.courseName;
        className = savedData.className;
      }
    }

    // API g·ª≠i mail t·ª± ƒë·ªông
    fetch('http://localhost:3000/api/sendemail', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        to: formData.email,
        subject: 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi CUSC',
        text: `Ch√†o ${formData.fullName},

CUSC xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m v√† li√™n h·ªá v·ªõi c√°c kh√≥a h·ªçc c·ªßa trung t√¢m.

Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu c·ªßa b·∫°n v√† s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian s·ªõm nh·∫•t trong khung gi·ªù l√†m vi·ªác c·ªßa trung t√¢m. Mong b·∫°n vui l√≤ng ch√∫ √Ω ƒëi·ªán tho·∫°i v√† email ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin h·ªó tr·ª£ nhanh ch√≥ng.

Ngo√†i ra, b·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua Zalo ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n nhanh h∆°n.

CUSC tr√¢n tr·ªçng c·∫£m ∆°n.`,
        html: `
      <!DOCTYPE html>
      <html lang="vi">
      <head>
        <meta charset="UTF-8" />
        <title>Th∆∞ c·∫£m ∆°n t·ª´ CUSC</title>
      </head>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <p>Ch√†o <strong>${formData.fullName}</strong>,</p>

        <p>
          CUSC xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m v√† li√™n h·ªá v·ªõi c√°c kh√≥a h·ªçc c·ªßa trung t√¢m.
        </p>

        <p>
          Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu c·ªßa b·∫°n v√† s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian s·ªõm nh·∫•t trong khung gi·ªù l√†m vi·ªác c·ªßa trung t√¢m. Mong b·∫°n vui l√≤ng ch√∫ √Ω ƒëi·ªán tho·∫°i v√† email ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin h·ªó tr·ª£ nhanh ch√≥ng.
        </p>

        <p>
          Ngo√†i ra, b·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua Zalo ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n nhanh h∆°n.
        </p>
 <img 
          src="https://yu.ctu.edu.vn/images/upload/article/2020/03/0305-logo-ctu.png"
          alt="Logo CUSC" 
          style="margin-top: 20px; width: 200px; display: block;" 
        />
        <p>
          CUSC tr√¢n tr·ªçng c·∫£m ∆°n.
        </p>

       
      </body>
      </html>
    `,
      }),
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.message) {
          console.log('Success:', data.message);
        } else if (data.error) {
          console.error('Error:', data.error);
        }
      })
      .catch((err) => console.error('Fetch error:', err));

    // API g·ª≠i data ƒë√™n BE
    const now = new Date();
    try {
      const response = await fetch('http://localhost:3000/api/submitform', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          student_name: formData.fullName,
          date_of_birth: formData.dob,
          gender: formData.gender,
          email: formData.email,
          phone_number: formData.phoneNumber,
          zalo_phone: formData.zaloPhoneNumber,
          link_facebook: formData.facebookLink,
          current_education_level: formData.userType,
          other_education_level_description: formData.otherUserType,
          high_school_name: formData.highSchoolName,
          city: formData.city,
          source: formData.infoSources
            .filter((src) => src !== 'Kh√°c')
            .join(', '),
          current_status: 'No contact yet',
          registration_date: now.toLocaleString(),
          status_change_date: 'null',
          student_created_at: 'null',
          student_updated_at: 'null',
          assigned_counselor_name: 'null',
          assigned_counselor_email: 'null',
          assigned_counselor_type: 'null',
          interested_courses_details: courseName + '___' + className,
          student_status_history: 'null',
          last_consultation_date: 'null',
          last_consultation_duration_minutes: 'null',
          last_consultation_notes: 'null',
          last_consultation_type: 'null',
          last_consultation_status: 'Contact',
          last_consultation_counselor_name: 'null',
        }),
      });

      if (!response.ok) {
        throw new Error('L·ªói khi g·ª≠i d·ªØ li·ªáu');
      }

      const result = await response.json();
      console.log('Ph·∫£n h·ªìi t·ª´ server:', result);

      // N·∫øu mu·ªën, b·∫°n c√≥ th·ªÉ chuy·ªÉn trang ho·∫∑c reset form ·ªü ƒë√¢y
      // router.push('/thank-you'); ho·∫∑c setFormData(initialFormData);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-md space-y-6 "
    >
      <h2 className="text-3xl font-bold mb-4">
        üìù ƒêƒÉng k√Ω t∆∞ v·∫•n ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o t·∫°i CUSC
      </h2>

      {/* I. Th√¥ng tin c√° nh√¢n */}
      <fieldset className="border p-4 rounded">
        <legend className="font-semibold mb-2">I. Th√¥ng tin c√° nh√¢n</legend>
        {/* Email ƒëƒÉng k√Ω */}
        <div>
          <label htmlFor="email" className="block font-semibold">
            Email ƒëƒÉng k√Ω: <span className="text-red-600">(B·∫Øt bu·ªôc)</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className={`w-full mt-1 p-2 border rounded ${
              errors.email ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {errors.email && (
            <p className="text-red-600 text-sm mt-1">{errors.email}</p>
          )}
        </div>
        {/* H·ªç v√† t√™n */}
        <div className="mb-4">
          <label htmlFor="fullName" className="block font-medium">
            H·ªç v√† t√™n: <span className="text-red-600">(B·∫Øt bu·ªôc)</span>
          </label>
          <input
            type="text"
            id="fullName"
            name="fullName"
            value={formData.fullName}
            onChange={handleChange}
            className={`w-full mt-1 p-2 border rounded ${
              errors.fullName ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {errors.fullName && (
            <p className="text-red-600 text-sm mt-1">{errors.fullName}</p>
          )}
        </div>

        {/* Ng√†y th√°ng nƒÉm sinh */}
        <div className="mb-4">
          <label htmlFor="dob" className="block font-medium">
            Ng√†y th√°ng nƒÉm sinh:{' '}
            <span className="text-red-600">(B·∫Øt bu·ªôc)</span>
          </label>
          <input
            type="date"
            id="dob"
            name="dob"
            value={formData.dob}
            onChange={handleChange}
            className={`w-full mt-1 p-2 border rounded ${
              errors.dob ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {errors.dob && (
            <p className="text-red-600 text-sm mt-1">{errors.dob}</p>
          )}
        </div>

        {/* Gi·ªõi t√≠nh */}
        <div className="mb-4">
          <label className="block font-medium mb-1">Gi·ªõi t√≠nh:</label>
          <div className="flex space-x-6">
            {['Nam', 'N·ªØ', 'Kh√°c'].map((genderOption) => (
              <label
                key={genderOption}
                className="inline-flex items-center space-x-2"
              >
                <input
                  type="radio"
                  name="gender"
                  value={genderOption}
                  checked={formData.gender === genderOption}
                  onChange={handleChange}
                  className="form-radio"
                />
                <span>{genderOption}</span>
              </label>
            ))}
          </div>
          {/* {errors.gender && (
            <p className="text-red-600 text-sm mt-1">{errors.gender}</p>
          )} */}
        </div>

        {/* S·ªë ƒëi·ªán tho·∫°i th∆∞·ªùng d√πng */}
        <div className="mb-4">
          <label htmlFor="phoneNumber" className="block font-medium">
            S·ªë ƒëi·ªán tho·∫°i th∆∞·ªùng d√πng:{' '}
            <span className="text-red-600">(B·∫Øt bu·ªôc)</span>
          </label>
          <input
            type="tel"
            id="phoneNumber"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleChange}
            className={`w-full mt-1 p-2 border rounded ${
              errors.phoneNumber ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {errors.phoneNumber && (
            <p className="text-red-600 text-sm mt-1">{errors.phoneNumber}</p>
          )}
        </div>

        {/* S·ªë ƒëi·ªán tho·∫°i Zalo */}
        <div className="mb-4">
          <label htmlFor="zaloPhoneNumber" className="block font-medium">
            S·ªë ƒëi·ªán tho·∫°i s·ª≠ d·ª•ng Zalo (n·∫øu kh√°c):
          </label>
          <input
            type="tel"
            id="zaloPhoneNumber"
            name="zaloPhoneNumber"
            value={formData.zaloPhoneNumber}
            onChange={handleChange}
            className={`w-full mt-1 p-2 border rounded ${
              errors.zaloPhoneNumber ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {errors.zaloPhoneNumber && (
            <p className="text-red-600 text-sm mt-1">
              {errors.zaloPhoneNumber}
            </p>
          )}
        </div>

        {/* Facebook link */}
        <div className="mb-4">
          <label htmlFor="facebookLink" className="block font-medium">
            Link Facebook ƒëang s·ª≠ d·ª•ng:
          </label>
          <input
            type="url"
            id="facebookLink"
            name="facebookLink"
            value={formData.facebookLink}
            onChange={handleChange}
            className="w-full mt-1 p-2 border rounded border-gray-300"
          />
        </div>

        {/* B·∫°n l√† */}
        <div className="mb-4">
          <label className="block font-medium mb-1">
            B·∫°n l√†: <span className="text-red-600">(B·∫Øt bu·ªôc)</span>
          </label>
          <div className="space-y-2 space-x-3">
            {[
              'H·ªçc sinh THCS',
              'H·ªçc sinh THPT',
              'Sinh vi√™n',
              'Ng∆∞·ªùi ƒëi l√†m',
              'M·ª•c kh√°c',
            ].map((option) => (
              <label
                key={option}
                className="inline-flex items-center space-x-2"
              >
                <input
                  type="radio"
                  name="userType"
                  value={option}
                  checked={formData.userType === option}
                  onChange={handleChange}
                  className="form-radio"
                />
                <span>{option}</span>
              </label>
            ))}
          </div>
          {formData.userType === 'M·ª•c kh√°c' && (
            <input
              type="text"
              name="otherUserType"
              value={formData.otherUserType}
              onChange={handleChange}
              placeholder="Ghi r√µ"
              className={`mt-2 w-full p-2 border rounded ${
                errors.otherUserType ? 'border-red-500' : 'border-gray-300'
              }`}
            />
          )}
          {errors.userType && (
            <p className="text-red-600 text-sm mt-1">{errors.userType}</p>
          )}
          {errors.otherUserType && (
            <p className="text-red-600 text-sm mt-1">{errors.otherUserType}</p>
          )}
        </div>
      </fieldset>

      {/* II. Th√¥ng tin h·ªçc t·∫≠p */}
      <fieldset className="border p-4 rounded">
        <legend className="font-semibold mb-2">II. Th√¥ng tin h·ªçc t·∫≠p</legend>

        {/* Tr∆∞·ªùng ƒëang h·ªçc */}
        <div className="mb-4">
          <label htmlFor="highSchoolName" className="block font-medium">
            T√™n tr∆∞·ªùng ƒëang h·ªçc (n·∫øu l√† h·ªçc sinh/sinh vi√™n):
          </label>
          <input
            type="text"
            id="highSchoolName"
            name="highSchoolName"
            value={formData.highSchoolName}
            onChange={handleChange}
            className="w-full mt-1 p-2 border rounded border-gray-300"
          />
        </div>

        {/* T·ªânh/th√†nh ph·ªë */}
        <div className="mb-4">
          <label htmlFor="city" className="block font-medium">
            T·ªânh / Th√†nh ph·ªë b·∫°n ƒëang sinh s·ªëng:
          </label>
          <input
            type="text"
            id="city"
            name="city"
            value={formData.city}
            onChange={handleChange}
            className="w-full mt-1 p-2 border rounded border-gray-300"
          />
        </div>
      </fieldset>
      {/* IV. B·∫°n bi·∫øt th√¥ng tin qua k√™nh n√†o */}
      <fieldset className="border p-4 rounded">
        <legend className="font-semibold mb-2">
          III. B·∫°n bi·∫øt th√¥ng tin qua k√™nh n√†o?
        </legend>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-h-48 overflow-y-auto border p-2 rounded">
          {infoSourcesOptions.map((source) => (
            <label key={source} className="inline-flex items-center space-x-2">
              <input
                type="checkbox"
                name="infoSources"
                value={source}
                checked={formData.infoSources.includes(source)}
                onChange={handleChange}
                className="form-checkbox"
              />
              <span>{source}</span>
            </label>
          ))}

          {/* Th√™m option 'Kh√°c' */}
          <label className="inline-flex items-center space-x-2">
            <input
              type="checkbox"
              name="infoSources"
              value="Kh√°c"
              checked={formData.infoSources.includes('Kh√°c')}
              onChange={handleChange}
              className="form-checkbox"
            />
            <span>Kh√°c</span>
          </label>
        </div>
        {/* {errors.infoSources && (
          <p className="text-red-600 text-sm mt-1">{errors.infoSources}</p>
        )} */}
      </fieldset>

      {/* V. ƒê·ªìng √Ω nh·∫≠n th√¥ng b√°o */}
      {/* <fieldset className="border p-4 rounded">
        <legend className="font-semibold mb-2">
          IV. ƒê·ªìng √Ω nh·∫≠n th√¥ng b√°o t·ª´ CUSC
        </legend>
        <label className="inline-flex items-center space-x-5 ">
          <input
            type="checkbox"
            name="consent"
            checked={formData.consent}
            onChange={handleChange}
            className="form-checkbox"
          />
          <span>
            Nh·∫≠n th√¥ng tin m·ªõi nh·∫•t qua c√°c k√™nh Email, Facebook, Zalo, SMS v·ªÅ
            s·ª± ki·ªán, ho·∫°t ƒë·ªông c·ªông ƒë·ªìng, tuy·ªÉn sinh, c√¥ng ngh·ªá‚Ä¶
          </span>
        </label>
      </fieldset> */}

      {/* Submit */}
      <div>
        <button
          type="submit"
          className="bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 transition"
        >
          ƒêƒÉng k√Ω
        </button>
      </div>
    </form>
  );
};

export default RegistrationForm;
